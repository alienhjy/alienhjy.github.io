<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>运维向 on 黄家垚的主页</title>
    <link>http://alienhjy.github.io/categories/%E8%BF%90%E7%BB%B4%E5%90%91/</link>
    <description>Recent content in 运维向 on 黄家垚的主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2015 Copyleft Text</copyright>
    <lastBuildDate>Mon, 01 Feb 2016 15:01:13 +0800</lastBuildDate>
    <atom:link href="http://alienhjy.github.io/categories/%E8%BF%90%E7%BB%B4%E5%90%91/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[转载]awk &amp; sed ，一个老派系统管理员的基本素养</title>
      <link>http://alienhjy.github.io/2016/2016-02-01_remember-sed-awk-linux-admins-should/</link>
      <pubDate>Mon, 01 Feb 2016 15:01:13 +0800</pubDate>
      
      <guid>http://alienhjy.github.io/2016/2016-02-01_remember-sed-awk-linux-admins-should/</guid>
      <description>&lt;p&gt;&lt;font color=red&gt;我们不要让下一代 Linux 和 Unix 的管理员忘记初始化脚本和基本工具的好处&lt;/font&gt;&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
&lt;img src=&#34;http://alienhjy.github.io/images/remember-sed-awk-linux-admins-should/01.jpg&#34;/&gt;&lt;/br&gt;
图片来源: Shutterstock
&lt;/div&gt;

&lt;p&gt;我曾经有一次在 Reddit 看到一个帖子，
“&lt;a href=&#34;https://www.reddit.com/r/linuxadmin/comments/3lwyko/how_do_i_remove_every_occurence_of_duplicate_line/&#34;&gt;请问如何操作文本文件&lt;/a&gt;”。
这是一个很简单的需求，就像我们常用 Unix 的人每天遇到的一样。他的问题是，
如何删除文件中的重复行，只保留不重复的。 这听起来似乎很简单，但是当文件足够大时，就会有些复杂。&lt;/p&gt;

&lt;p&gt;这个问题有很多种不同的答案。你可以使用几乎任何一种语言来写这样的一个脚本，
只是时间的投入和代码的复杂性不同罢了。根据你的个人水平，它大概会花费20-60分钟。
但是如果你使用了 Perl、Python、Ruby 中的一种，你可能很快实现它。&lt;/p&gt;

&lt;p&gt;或者你可以使用下面的一个方法，让你无比暖心的: 只用 awk。&lt;/p&gt;

&lt;p&gt;这个答案是迄今为止最简明、最简单的解决问题的方法。它只要一行！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;!seen[$0]++&#39; &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们来看看发生了什么：&lt;/p&gt;

&lt;p&gt;在这个命令中，其实隐藏了很多代码。awk 是一种文本处理语言，并且它内部有很多预设。
首先，你看到的实际上是一个 for 循环的结果。awk 假定你想通过循环处理输入文件的每一行，
所以你不需要明确的去指定它。awk 还假定了你需要打印输出处理后的数据，所以你也不需要去指定它。
最后，awk 假定循环在最后一句指令执行完结束，这一块也不再需要你去指定它。&lt;/p&gt;

&lt;p&gt;这个例子中的字符串 seen 是一个关联数组的名字。$0 是一个变量，表示整个当前行。所以，
这个命令翻译成人类语言就是“对这个文件的每一行进行检查，如果你之前没有见过它，就打印出来。
”如果该关联数组的键名还不存在就添加到数组，并增加其取值，这样 awk 下次遇到同样的行时就会不匹配
（条件判断为“假”），从而不打印出来。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;据微博上 &lt;a href=&#34;http://weibo.com/3246109510&#34;&gt;@ZorroLang&lt;/a&gt; 的补充：少提了一个重点，
要不然只会 C 语言的人很难理解为什么 seen[$0]++ 一行代码就行了，
这里隐含了 awk 对于其数组变量的处理方式。awk 的数组是关联数组，且不需要声明，
而是引用即创建，注意是创建，后面都不会消失的。也就是你像 str[any] 这样随便写一个数组变量，
这个数组元素就此就创建了，且初始化为0或空。&lt;/p&gt;

&lt;p&gt;谢谢 &lt;a href=&#34;http://weibo.com/3246109510&#34;&gt;@ZorroLang&lt;/a&gt; ~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一些人认为这样是优雅的，另外的人认为这可能会造成混淆。任何在日常工作上使用 awk
的都是第一类人。awk 就是设计用来做这个的。在 awk 中，你可以写多行代码。
你甚至可以&lt;a href=&#34;http://intro-to-awk.blogspot.com/2008/08/awk-more-complex-examples.html&#34;&gt;用 awk 写一些让人不安的复杂功能&lt;/a&gt;。
但终究来说，awk 还是一个进行文本处理的程序，一般是通过管道。
去掉（没必要的）循环定义是很常见的快捷用法，不过如果你乐意，你也可以用下面的代码做同样的事情：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;awk &#39;{ if (!seen[$0]) print $0; seen[$0]++ }&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会产生相同的结果。&lt;/p&gt;

&lt;p&gt;awk 是完成这项工作的完美工具。不过，我相信很多管理员&amp;ndash;特别是新管理员会转而使用
&lt;a href=&#34;http://www.infoworld.com/article/2613338/linux/linux-how-to-script-a-bash-crash-course.html&#34;&gt;Bash&lt;/a&gt;
或 Python 来完成这一任务，因为对 awk 的知识和对它的能力的了解看起来随着时间而慢慢被人淡忘。
我认为这是标志着一个问题，由于对之前的解决方案缺乏了解，那些已经解决了几十年的问题又突然出现了。&lt;/p&gt;

&lt;p&gt;shell、grep、sed 和 awk 是 Unix 的基础。如果你不能非常轻松的使用它们，你将会被自己束缚住，
因为它们构成了通过命令行和脚本与 Unix 系统交互的基础。
学习这些工具如何工作最好的方法之一就是观察真实的例子和实验，
你可以在各种 Unix 衍生系统的初始化系统中找到很多，但在 Linux 发行版中它们已经被
&lt;a href=&#34;http://www.infoworld.com/article/2608798/data-center/systemd--harbinger-of-the-linux-apocalypse.html&#34;&gt;systemd&lt;/a&gt; 取代了。&lt;/p&gt;

&lt;p&gt;数以百万计的 Unix 管理员了解 Shell 脚本和 Unix 工具如何读、写、修改和用在初始化脚本上。
不同系统的初始化脚本有很大不同，甚至是不同的 Linux 发行版也不同。但是它们都源自 sh，
而且它们都用像 sed、awk 还有 grep 这样的核心的命令行工具。&lt;/p&gt;

&lt;p&gt;我每天都会听到很多人抱怨初始化脚本太“古老”而且很“难”。但是实际上，
初始化脚本和 Unix 管理员每天使用的工具一样，还提供了一个非常好的方式来更加熟悉和习惯这些工具。
说初始化脚本难于阅读和难于使用实际上是承认你缺乏对 Unix 基础工具的熟悉。&lt;/p&gt;

&lt;p&gt;说起在 Reddit 上看到的内容，我也碰到过这个问题，来自一个新入行的 Linux 系统管理员,
“&lt;a href=&#34;https://www.reddit.com/r/linuxadmin/comments/3ltq2y/when_i_start_learning_about_linux_administration/&#34;&gt;问他是否应该还要去学老式的初始化系统 sysvinit&lt;/a&gt;”。
这个帖子的大多数的答案都是正面的——是的，应该学习 sysvinit 和 systemd 两个。
一位评论者甚至指出，初始化脚本是学习 Bash 的好方法。而另一个消息是，
Fortune 50 强的公司还没有计划迁移到以 systemd 为基础的发行版上。&lt;/p&gt;

&lt;p&gt;但是，这提醒了我这确实是一个问题。如果我们继续沿着消除脚本和脱离操作系统核心组件的方式发展下去，
由于疏于接触，我们将会不经意间使新管理员难于学习基本的 Unix 工具。&lt;/p&gt;

&lt;p&gt;我不知道为什么有些人想在一层又一层的抽象化来掩盖 Unix 内部，
但是这样发展下去可能会让新一代的系统管理员们变成只会按下按钮的工人。我觉得这不是一件好事情。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文地址：&lt;a href=&#34;http://www.infoworld.com/article/2985804/linux/remember-sed-awk-linux-admins-should.html&#34;&gt;http://www.infoworld.com/article/2985804/linux/remember-sed-awk-linux-admins-should.html&lt;/a&gt;&lt;br /&gt;
译文原文地址：&lt;a href=&#34;https://linux.cn/article-6881-1.html&#34;&gt;https://linux.cn/article-6881-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作者：&lt;a href=&#34;http://www.infoworld.com/author/Paul-Venezia/&#34;&gt;Paul Venezia&lt;/a&gt;
译者：&lt;a href=&#34;https://github.com/Bestony&#34;&gt;Bestony&lt;/a&gt;
校对：&lt;a href=&#34;https://github.com/wxy&#34;&gt;wxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文由 &lt;a href=&#34;https://github.com/LCTT/TranslateProject&#34;&gt;LCTT&lt;/a&gt; 原创编译，
&lt;a href=&#34;https://linux.cn/article-6881-1.html&#34;&gt;Linux中国&lt;/a&gt; 荣誉推出&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[转载]最简明扼要的 Systemd 教程，只需十分钟</title>
      <link>http://alienhjy.github.io/2016/2016-01-20_linux-101-get-the-most-out-of-systemd/</link>
      <pubDate>Wed, 20 Jan 2016 17:05:29 +0800</pubDate>
      
      <guid>http://alienhjy.github.io/2016/2016-01-20_linux-101-get-the-most-out-of-systemd/</guid>
      <description>

&lt;p&gt;systemd 是 Linux 下的一款系统和服务管理器，兼容 SysV 和 LSB 的启动脚本。
systemd 的特性有：支持并行化任务；同时采用 socket 式与 D-Bus 总线式激活服务；
按需启动守护进程（daemon）；利用 Linux 的 cgroups 监视进程；支持快照和系统恢复；
维护挂载点和自动挂载点；各服务间基于依赖关系进行精密控制。&lt;/p&gt;

&lt;h5 id=&#34;前言:0d6c59cee5b31ce37e9176fed3a35e29&#34;&gt;前言&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;干嘛要这么做？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;理解现代 Linux 发行版中的显著变化；&lt;br /&gt;
看看 Systemd 是如何取代 SysVinit 的；&lt;br /&gt;
搞定单元（unit）和新的 journal 日志。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;吐槽邮件、人身攻击、死亡威胁——Lennart Poettering，Systemd 的作者，
对收到这些东西早就习以为常了。这位 Red Hat 公司的员工之前在 Google+ 上怒斥 FOSS
社区(&lt;a href=&#34;http://tinyurl.com/poorlennart&#34;&gt;http://tinyurl.com/poorlennart&lt;/a&gt;)的本质，悲痛且失望地表示：“那真是个令人恶心的地方”。
他着重指出 Linus Torvalds 在邮件列表上言辞极其刻薄的帖子，
并谴责这位内核的领导者为在线讨论定下基调，并使得人身攻击及贬抑之辞成为常态。&lt;/p&gt;

&lt;p&gt;但为何 Poettering 会遭受如此多的憎恨？为何就这么个搞搞开源软件的人要忍受这等愤怒？
答案就在于他的软件的重要性。如今大多数发行版中，Systemd 是 Linux 内核发起的第一个程序，
并且它还扮演多种角色。它会启动系统服务、处理用户登录，每隔特定的时间执行一些任务，还有很多很多。
它在不断地成长，并逐渐成为 Linux 的某种“基础系统”——提供系统启动和发行版维护所需的所有工具。&lt;/p&gt;

&lt;p&gt;如今，在以下几点上 Systemd 颇具争议：它逃避了一些已经确立的 Unix 传统，例如纯文本的日志文件；
它被看成是个“大一统”的项目，试图接管一切；它还是我们这个操作系统的支柱的重要革新。
然而大多数主流发行版已经接受了（或即将接受）它，因此它就活了下来。而且它确实是有好处的：
更快地启动，更简单地管理那些有依赖的服务程序，提供强大且安全的日志系统等。&lt;/p&gt;

&lt;p&gt;因此在这篇教程中，我们将探索 Systemd 的特性，并向您展示如何最有效地利用这些特性。
即便您此刻并不是这款软件的粉丝，读完本文后您至少可以更加了解和适应它。&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
&lt;img src=&#34;http://alienhjy.github.io/images/linux-101-get-the-most-out-of-systemd/01.gif&#34;&gt;&lt;/br&gt;
这部没正经的动画片来自http://tinyurl.com/m2e7mv8，它把 Systemd 塑造成一只狂暴的动物，吞噬它路过的一切。大多数批评者的言辞可不像这只公仔一样柔软。
&lt;/div&gt;

&lt;h5 id=&#34;启动及服务:0d6c59cee5b31ce37e9176fed3a35e29&#34;&gt;启动及服务&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;大多数主流发行版要么已经采用 Systemd，要么即将在下个发布中采用（如 Debian 和
Ubuntu）。在本教程中，我们使用 Fedora 21（该发行版已经是 Systemd
的优秀实验场地）的一个预览版进行演示，但不论您用哪个发行版，
要用到的命令和注意事项都应该是一样的。这是 Systemd 的一个加分点：
它消除了不同发行版之间许多细微且琐碎的区别。&lt;/p&gt;

&lt;p&gt;在终端中输入&lt;code&gt;ps ax | grep systemd&lt;/code&gt;，看到第一行，其中的数字&lt;strong&gt;1&lt;/strong&gt;表示它的进程号是1，
也就是说它是 Linux 内核发起的第一个程序。因此，内核一旦检测完硬件并组织好了内存，
就会运行&lt;code&gt;/usr/lib/systemd/systemd&lt;/code&gt;可执行程序，这个程序会按顺序依次发起其他程序。
（在还没有 Systemd 的日子里，内核会去运行&lt;code&gt;/sbin/init&lt;/code&gt;，
随后这个程序会在名为 SysVinit 的系统中运行其余的各种启动脚本。）&lt;/p&gt;

&lt;p&gt;Systemd 的核心是一个叫单元(unit)的概念，它是一些存有关于服务（service，
在运行在后台的程序）、设备、挂载点、和操作系统其他方面信息的配置文件。
Systemd 的其中一个目标就是简化这些事物之间的相互作用，
因此如果你有程序需要在某个挂载点被创建或某个设备被接入后开始运行，
Systemd 可以让这一切正常运作起来变得相当容易。（在没有 Systemd 的日子里，
要使用脚本来把这些事情调配好，那可是相当丑陋的。）要列出您 Linux 系统上的所有单元，
输入以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl list-unit-files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，&lt;code&gt;systemctl&lt;/code&gt;是与 Systemd 交互的主要工具，它有不少选项。在单元列表中，
您会注意到这儿有一些格式化：被启用(enabled)的单元显示为绿色，被禁用(disabled)的显示为红色。
标记为“static”的单元不能直接启用，它们是其他单元所依赖的对象。若要限制输出列表只包含服务，
使用以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl list-unit-files --type=service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;转载者注：disabled 指的是这个单元不会在开机的时候自动执行，并不影响使用&lt;code&gt;systemctl&lt;/code&gt;
方式来启动它。同理。enabled 指的是这个单元在开机的时候会被自动执行。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;注意，一个单元显示为“enabled”，并不等于对应的服务正在运行，而只能说明它可以被开启。
要获得某个特定服务的信息，以 GDM (Gnome Display Manager) 为例，输入以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl status gdm.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这条命令提供了许多有用的信息：一段给人看的服务描述、单元配置文件的位置、启动的时间、
进程号，以及它所从属的 CGroups（用以限制各组进程的资源开销）。&lt;/p&gt;

&lt;p&gt;如果您去查看位于&lt;code&gt;/usr/lib/systemd/system/gdm.service&lt;/code&gt;的单元配置文件，
您可以看到各种选项，包括要被运行的二进制文件（“ExecStart”那一行），
相冲突的其他单元（即不能同时进入运行的单元），以及需要在本单元执行前进入运行的单元
（“After”那一行）。一些单元有附加的依赖选项，例如“Requires”（必要的依赖）和“Wants”
（可选的依赖）。&lt;/p&gt;

&lt;p&gt;此处另一个有趣的选项是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Alias=display-manager.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当您启动&lt;strong&gt;gdm.service&lt;/strong&gt;后，您将可以通过&lt;code&gt;systemctl status display-manager.service&lt;/code&gt;
来查看它的状态。当您知道有显示管理程序(display manager)在运行并想对它做点什么，
但您不关心那究竟是 GDM，KDM，XDM 还是什么别的显示管理程序时，这个选项会非常有用。&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
&lt;img src=&#34;http://alienhjy.github.io/images/linux-101-get-the-most-out-of-systemd/02.jpg&#34; /&gt;&lt;br&gt;
使用 systemctl status 命令后面跟一个单元名，来查看对应的服务有什么情况。
&lt;/div&gt;

&lt;h5 id=&#34;目标-target-锁定:0d6c59cee5b31ce37e9176fed3a35e29&#34;&gt;“目标”(target) 锁定&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;如果您在&lt;code&gt;/usr/lib/systemd/system&lt;/code&gt;目录中输入&lt;code&gt;ls&lt;/code&gt;命令，您将看到各种以&lt;code&gt;.target&lt;/code&gt;结尾的文件。
启动目标(target)是一种将多个单元聚合在一起以致于将它们同时启动的方式。例如，对大多数类 Unix
操作系统而言有一种“多用户”(multi-user)状态，意思是系统已被成功启动，后台服务正在运行，
并且已准备好让一个或多个用户登录并工作——至少在文本模式下。
（其他状态包括用于进行管理工作的单用户(single-user)状态，
以及用于机器关机的重启状态。）&lt;/p&gt;

&lt;p&gt;如果您打开&lt;strong&gt;multi-user.target&lt;/strong&gt;文件一探究竟，您可能期待看到的是一个要被启动的单元列表。
但您会发现这个文件内部几乎空空如也——其实，一个服务会通过&lt;strong&gt;WantedBy&lt;/strong&gt;
选项让自己成为启动目标的依赖。因此如果您去打开&lt;strong&gt;avahi-daemon.service&lt;/strong&gt;,
&lt;strong&gt;NetworkManager.service&lt;/strong&gt;及其他&lt;strong&gt;.service&lt;/strong&gt;文件看看，
您将在 Install 段看到这一行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此，切换到多用户启动目标会启用(enable)那些包含上述语句的单元。
还有其他一些启动目标可用（例如&lt;strong&gt;emergency.target&lt;/strong&gt;提供一个紧急情况使用的 shell，
以及&lt;strong&gt;halt.target&lt;/strong&gt;用于机器关机），您可以用以下方式轻松地在它们之间切换：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl isolate emergency.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在许多方面，这些都很像 SysVinit 中的运行级(runlevel)，如文本模式的
&lt;strong&gt;multi-user.target&lt;/strong&gt;类似于第3运行级，&lt;strong&gt;graphical.target&lt;/strong&gt;类似于第5运行级，
&lt;strong&gt;reboot.target&lt;/strong&gt;类似于第6运行级，诸如此类。&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
&lt;img src=&#34;http://alienhjy.github.io/images/linux-101-get-the-most-out-of-systemd/03.jpg&#34; /&gt;&lt;br/&gt;
与传统的脚本相比，单元配置文件也许看起来很陌生，但并不难以理解。
&lt;/div&gt;

&lt;h5 id=&#34;开启与停止:0d6c59cee5b31ce37e9176fed3a35e29&#34;&gt;开启与停止&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;现在您也许陷入了沉思：我们已经看了这么多，但仍没看到如何停止和开启服务！
这其实是有原因的。从外部看，Systemd 也许很复杂，像野兽一般难以驾驭。因此在您开始摆弄它之前，
有必要从宏观的角度看看它是如何工作的。实际用来管理服务的命令非常简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl stop cups.service
systemctl start cups.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（若某个单元被禁用了，您可以先通过&lt;code&gt;systemctl enable&lt;/code&gt;加上该单元名的方式将其启用。
这种做法会为该单元创建一个符号链接，并将其放置在当前启动目标的&lt;code&gt;.wants&lt;/code&gt;目录下，这些&lt;code&gt;.wants&lt;/code&gt;
目录在&lt;code&gt;/etc/systemd/system&lt;/code&gt;文件夹中。）&lt;/p&gt;

&lt;p&gt;还有两个有用的命令是&lt;code&gt;systemctl restart&lt;/code&gt;和&lt;code&gt;systemctl reload&lt;/code&gt;，后面接单元名。
后者用于让单元重新加载它的配置文件。Systemd 的绝大部分都有良好的文档，
因此您可以查看手册 (&lt;code&gt;man systemctl&lt;/code&gt;) 了解每条命令的细节。&lt;/p&gt;

&lt;h5 id=&#34;定时器单元-取代-cron:0d6c59cee5b31ce37e9176fed3a35e29&#34;&gt;定时器单元：取代 Cron&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;除了系统初始化和服务管理，Systemd 还染指了其他方面。在很大程度上，它能够完成&lt;strong&gt;cron&lt;/strong&gt;的工作，
而且可以说是以更灵活的方式（并带有更易读的语法）。&lt;strong&gt;cron&lt;/strong&gt;
是一个以规定时间间隔执行任务的程序——例如清除临时文件，刷新缓存等。&lt;/p&gt;

&lt;p&gt;如果您再次进入&lt;code&gt;/usr/lib/systemd/system&lt;/code&gt;目录，您会看到那儿有多个&lt;code&gt;.timer&lt;/code&gt;文件。
用&lt;code&gt;less&lt;/code&gt;来查看这些文件，您会发现它们与&lt;code&gt;.service&lt;/code&gt;和&lt;code&gt;.target&lt;/code&gt;文件有着相似的结构，
而区别在于&lt;code&gt;[Timer]&lt;/code&gt;段。举个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Timer]
OnBootSec=1h
OnUnitActiveSec=1w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OnBootSec&lt;/strong&gt;选项告诉 Systemd 在系统启动一小时后启动这个单元。
第二个选项的意思是：自那以后每周启动这个单元一次。关于定时器有大量选项您可以设置，
输入&lt;code&gt;man systemd.time&lt;/code&gt;查看完整列表。&lt;/p&gt;

&lt;p&gt;Systemd 的时间精度默认为一分钟。也就是说，它会在设定时刻的一分钟内运行单元，
但不一定精确到那一秒。这么做是基于电源管理方面的原因，
但如果您需要一个没有任何延时且精确到毫秒的定时器，您可以添加以下一行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;AccuracySec=1us
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外，&lt;strong&gt;WakeSystem&lt;/strong&gt;选项（可以被设置为 true 或 false）决定了定时器是否可以唤醒处于休眠状态的机器。&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
&lt;img src=&#34;http://alienhjy.github.io/images/linux-101-get-the-most-out-of-systemd/04.jpg&#34;/&gt;&lt;/br&gt;
有一个 Systemd 的图形界面程序，即便它已有多年未被积极维护。
&lt;/div&gt;

&lt;h5 id=&#34;日志文件-向-journald-问声好:0d6c59cee5b31ce37e9176fed3a35e29&#34;&gt;日志文件：向 journald 问声好&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;Systemd 的第二个主要部分是 journal 。这是个日志系统，类似于&lt;code&gt;syslog&lt;/code&gt;但也有些显著区别。
如果您是个 Unix 日志管理模式的粉丝，准备好出离愤怒吧：这是个二进制日志，
因此您不能使用常规的命令行文本处理工具来解析它。这个设计决定不出意料地在网上引起了激烈的争论，
但它的确有些优点。例如，日志可以被更系统地组织，带有更多的元数据，
因此可以更容易地根据可执行文件名和进程号等过滤出信息。&lt;/p&gt;

&lt;p&gt;要查看整个 journal，输入以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;像许多其他的 Systemd 命令一样，该命令将输出通过管道的方式引向&lt;code&gt;less&lt;/code&gt;程序，
因此您可以使用空格键向下滚动，键入&lt;code&gt;/&lt;/code&gt;（斜杠）查找，以及其他熟悉的快捷键。
您也能在此看到少许颜色，像红色的警告及错误信息。&lt;/p&gt;

&lt;p&gt;以上命令会输出很多信息。为了限制其只输出本次启动的消息，使用如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl -b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是 Systemd 大放异彩的地方！您想查看自上次启动以来的全部消息吗？
试试&lt;code&gt;journalctl -b -1&lt;/code&gt;吧。再上一次的？用&lt;code&gt;-2&lt;/code&gt;替换&lt;code&gt;-1&lt;/code&gt;吧。那自某个具体时间，
例如2014年10月24日16:38以来的呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl -b --since=”2014-10-24 16:38”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即便您对二进制日志感到遗憾，那依然是个有用的特性，并且对许多系统管理员来说，
构建类似的过滤器比起写正则表达式而言容易多了。&lt;/p&gt;

&lt;p&gt;我们已经可以根据特定的时间来准确查找日志了，那可以根据特定程序吗？对单元而言，试试这个：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl -u gdm.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（注意：这是个查看 X server 产生的日志的好办法。）那根据特定的进程号？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl _PID=890
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;您甚至可以请求只看某个可执行文件产生的消息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl /usr/bin/pulseaudio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若您想将输出的消息限制在某个优先级，可以使用&lt;code&gt;-p&lt;/code&gt;选项。该选项参数为 0 的话只会显示紧急消息
（也就是说，是时候向&lt;strong&gt;$DEITY&lt;/strong&gt;祈求保佑了）（LCTT 译注： $DEITY 是一个计算机方面的幽默，
DEITY 是指广义上的“神”，$前缀表示这是一个变量），为 7 的话会显示所有消息，包括调试消息。
请查看手册 (&lt;code&gt;man journalctl&lt;/code&gt;) 获取更多关于优先级的信息。&lt;/p&gt;

&lt;p&gt;值得指出的是，您也可以将多个选项结合在一起，
若想查看在当前启动中由 GDM 服务输出的优先级数小于等于 3 的消息，请使用下述命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl -u gdm.service -p 3 -b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，如果您仅仅想打开一个随 journal 持续更新的终端窗口，
就像在没有 Systemd 时使用&lt;code&gt;tail&lt;/code&gt;命令实现的那样，输入&lt;code&gt;journalctl -f&lt;/code&gt;就好了。&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
&lt;img src=&#34;http://alienhjy.github.io/images/linux-101-get-the-most-out-of-systemd/05.jpg&#34;/&gt;&lt;/br&gt;
二进制日志并不流行，但 journal 的确有它的优点，如非常方便的信息查找及过滤。
&lt;/div&gt;

&lt;h5 id=&#34;没有-systemd-的生活:0d6c59cee5b31ce37e9176fed3a35e29&#34;&gt;没有 Systemd 的生活？&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;如果您就是完全不能接受 Systemd，您仍然有一些主流发行版中的选择。
尤其是 Slackware，作为历史最为悠久的发行版，目前还没有做出改变，
但它的主要开发者并没有将其从未来规划中移除。
一些不出名的发行版也在坚持使用 SysVinit 。&lt;/p&gt;

&lt;p&gt;但这又将持续多久呢？Gnome 正越来越依赖于 Systemd，其他的主流桌面环境也会步其后尘。
这也是引起 BSD 社区一阵恐慌的原因：Systemd 与 Linux 内核紧密相连，导致在某种程度上，
桌面环境正变得越来越不可移植。一种折衷的解决方案也许会以 Uselessd
(&lt;a href=&#34;http://uselessd.darknedgy.net&#34;&gt;http://uselessd.darknedgy.net&lt;/a&gt;) 的形式到来：一种裁剪版的 Systemd，
纯粹专注于启动和监控进程，而不消耗整个基础系统。&lt;/p&gt;

&lt;div align=&#34;center&#34;&gt;
&lt;img src=&#34;http://alienhjy.github.io/images/linux-101-get-the-most-out-of-systemd/06.jpg&#34;/&gt;&lt;/br&gt;
若您不喜欢 Systemd，可以尝试一下 Gentoo 发行版，它将 Systemd 作为初始化工具的一种选择，但并不强制用户使用 Systemd。
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;原文地址：&lt;a href=&#34;http://www.linuxvoice.com/linux-101-get-the-most-out-of-systemd/&#34;&gt;http://www.linuxvoice.com/linux-101-get-the-most-out-of-systemd/&lt;/a&gt;
译文原文地址：&lt;a href=&#34;https://linux.cn/article-6888-1.html&#34;&gt;https://linux.cn/article-6888-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作者：&lt;a href=&#34;http://www.linuxvoice.com/author/mike/&#34;&gt;Mike Saunders&lt;/a&gt;
译者：&lt;a href=&#34;https://github.com/Ricky-Gong&#34;&gt;Ricky-Gong&lt;/a&gt;
校对：&lt;a href=&#34;https://github.com/wxy&#34;&gt;wxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文由 &lt;a href=&#34;https://github.com/LCTT/TranslateProject&#34;&gt;LCTT&lt;/a&gt; 原创编译，
&lt;a href=&#34;https://linux.cn/article-6888-1.html&#34;&gt;Linux中国&lt;/a&gt;荣誉推出&lt;/p&gt;

&lt;p&gt;&lt;em&gt;转载者再注：linuxcn的译文原文有非常漂亮的格式，建议阅读linuxcn的译文原文。&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>